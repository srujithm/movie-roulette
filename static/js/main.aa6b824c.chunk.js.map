{"version":3,"sources":["components/movie-card/movie-card.js","components/movie-list/movie-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","className","src","movie","poster_path","alt","title","MovieList","movies","map","key","id","SearchBox","type","placeholder","onChange","handleChange","App","updateSearchField","e","setState","searchField","target","value","state","fetch","then","res","json","results","this","filteredMovies","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAYeA,G,MATG,SAAAC,GACd,OACA,yBAAKC,UAAU,cACX,yBAAKC,IAAK,iCAAmCF,EAAMG,MAAMC,YAAaC,IAAKL,EAAMG,MAAMG,QACvF,4BAAKN,EAAMG,MAAMG,UCOVC,G,MAVG,SAAAP,GACd,OACI,yBAAKC,UAAU,cACVD,EAAMQ,OAAOC,KAAI,SAAAN,GAAK,OACnB,kBAAC,EAAD,CAAWO,IAAKP,EAAMQ,GAAIR,MAAOA,UCClCS,G,MANG,SAAAZ,GACd,OACI,2BAAOC,UAAU,SAASY,KAAK,SAASC,YAAad,EAAMc,YAAaC,SAAUf,EAAMgB,iBCgCjFC,G,kBA9BX,aAAe,IAAD,8BACV,+CAYJC,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACThB,OAAQ,GACRa,YAAa,IAJP,E,iFAOO,IAAD,OAChBI,MAAM,yHACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAAO,OAAIA,EAAQA,WAChDH,MAAK,SAAAlB,GAAM,OAAI,EAAKY,SAAS,CAAEZ,OAAQA,S,+BAMtC,IAAD,SAC0BsB,KAAKN,MAA5BhB,EADH,EACGA,OAAOa,EADV,EACUA,YACTU,EAAiBvB,EAAOwB,QAAO,SAAA7B,GAAK,OACtCA,EAAMG,MAAM2B,cAAcC,SAASb,EAAYY,kBAEnD,OACI,yBAAKhC,UAAU,OACX,kBAAC,EAAD,CAAWa,YAAY,YAAYE,aAAc,SAAAG,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,WAC3F,kBAAC,EAAD,CAAWf,OAAQuB,S,GAzBjBI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.aa6b824c.chunk.js","sourcesContent":["import React from 'react';\nimport './movie-card.css';\n\nconst MovieCard = props => {\n    return (\n    <div className=\"movie-card\">\n        <img src={\"https://image.tmdb.org/t/p/w92\" + props.movie.poster_path} alt={props.movie.title}></img>\n        <h3>{props.movie.title}</h3>\n    </div>\n    )\n};\n\nexport default MovieCard;","import React from 'react';\nimport MovieCard from '../movie-card/movie-card';\nimport './movie-list.css';\n\nconst MovieList = props => {\n    return (\n        <div className=\"movie-list\">\n            {props.movies.map(movie => (\n                <MovieCard key={movie.id} movie={movie}/>\n            ))}\n        </div>\n    )\n};\n\nexport default MovieList;","import React from 'react';\nimport './search-box.css';\n\nconst SearchBox = props => {\n    return (\n        <input className=\"search\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange}></input>\n    );\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport MovieList from './components/movie-list/movie-list';\nimport SearchBox from './components/search-box/search-box';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            movies: [],\n            searchField: ''\n        };\n    }\n    componentDidMount() {\n        fetch('https://api.themoviedb.org/3/movie/top_rated?api_key=53342103cbc883b7a05c3e91e248a8a6&language=en-US&page=1&region=US')\n            .then(res => res.json()).then(results => results.results)\n            .then(movies => this.setState({ movies: movies }))\n    }\n\n    updateSearchField = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n    render() {\n        const { movies,searchField } = this.state;\n        const filteredMovies = movies.filter(movie => (\n            movie.title.toLowerCase().includes(searchField.toLowerCase())\n        ));\n        return (\n            <div className=\"App\">\n                <SearchBox placeholder=\"search...\" handleChange={e => this.setState({searchField: e.target.value})} />\n                <MovieList movies={filteredMovies}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}